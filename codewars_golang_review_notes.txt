Go review stuff


====================================================================
Multiples checking via iteration

package kata

func Comp(array1 []int, array2 []int) bool {
  if array1 == nil || array2 == nil{
    return false
  } else if len(array1) == 0 || len(array2) == 0 {
    return false
  } else {
    exists:= false
    square:= 0
    for i:=0; i < len(array1); i++{
      square = array1[i]*array1[i]
      exists = false
      for j:=0; j < len(array2); j++{
        if square == array2[j]{
          exists = true
          break
        }
      }
      if exists == false{
        break
      }
    }
    return exists
  }
}


Via native libaries

package kata

import (
	"reflect"
	"sort"
)

func Comp(a, b []int) bool {
	if a == nil || b == nil {
		return false
	}
  
	c, d := a[:], b[:]
	for i, n := range a {
		c[i] = n * n
	}
  
	sort.Ints(c); sort.Ints(d)
	return reflect.DeepEqual(c, d)
}



Some special case

func Comp(array1 []int, array2 []int) bool {
	if array1 == nil || array2 == nil {
		return false
	}
	if len(array1) != len(array2)  {
		return false
	}
  if len(array1) ==0  {
		return true
	}
	firstCalc := make(map[int]int)
	for _, v := range array1 {
		firstCalc[v*v]++
	}
	for _, v := range array2 {
		kv, ok := firstCalc[v]
        if ok == false || kv == 0 {
        	return false
		}
		firstCalc[v]--
	}
	return true
}